// Generated by gencpp from file action_remote_teleop/CountUntilResult.msg
// DO NOT EDIT!


#ifndef ACTION_REMOTE_TELEOP_MESSAGE_COUNTUNTILRESULT_H
#define ACTION_REMOTE_TELEOP_MESSAGE_COUNTUNTILRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_remote_teleop
{
template <class ContainerAllocator>
struct CountUntilResult_
{
  typedef CountUntilResult_<ContainerAllocator> Type;

  CountUntilResult_()
    : count(0)  {
    }
  CountUntilResult_(const ContainerAllocator& _alloc)
    : count(0)  {
  (void)_alloc;
    }



   typedef int64_t _count_type;
  _count_type count;





  typedef boost::shared_ptr< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> const> ConstPtr;

}; // struct CountUntilResult_

typedef ::action_remote_teleop::CountUntilResult_<std::allocator<void> > CountUntilResult;

typedef boost::shared_ptr< ::action_remote_teleop::CountUntilResult > CountUntilResultPtr;
typedef boost::shared_ptr< ::action_remote_teleop::CountUntilResult const> CountUntilResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_remote_teleop::CountUntilResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_remote_teleop::CountUntilResult_<ContainerAllocator1> & lhs, const ::action_remote_teleop::CountUntilResult_<ContainerAllocator2> & rhs)
{
  return lhs.count == rhs.count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_remote_teleop::CountUntilResult_<ContainerAllocator1> & lhs, const ::action_remote_teleop::CountUntilResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_remote_teleop

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8dbac33d2eb67bfeeedd516d65fec846";
  }

  static const char* value(const ::action_remote_teleop::CountUntilResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8dbac33d2eb67bfeULL;
  static const uint64_t static_value2 = 0xeedd516d65fec846ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_remote_teleop/CountUntilResult";
  }

  static const char* value(const ::action_remote_teleop::CountUntilResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result\n"
"int64 count\n"
;
  }

  static const char* value(const ::action_remote_teleop::CountUntilResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CountUntilResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_remote_teleop::CountUntilResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_remote_teleop::CountUntilResult_<ContainerAllocator>& v)
  {
    s << indent << "count: ";
    Printer<int64_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_REMOTE_TELEOP_MESSAGE_COUNTUNTILRESULT_H
